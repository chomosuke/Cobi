openapi: '3.0.3'
info:
  title: incomplete RESTapi for a message app
  version: '1.0'
security:
  - bearerAuth: []
paths:
  /account/login:
    post:
      tags:
        - account
      security: []
      requestBody:
        $ref: '#/components/requestBodies/usernamePassword'
      responses:
        200:
          description: logged in
          content:
            text/plain:
              schema:
                type: string
                description: bearer token
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
  /account/register:
    post:
      tags:
        - account
      security: []
      requestBody:
        $ref: '#/components/requestBodies/usernamePassword'
      responses:
        200:
          description: register success and logged in
          content:
            text/plain:
              schema:
                type: string
                description: bearer token
        400:
          $ref: '#/components/responses/400'
        409:
          description: username taken
  /account:
    get:
      tags:
        - account
      description: get info for the logged in account
      responses:
        200:
          description: info for the logged in account
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
    patch:
      tags:
        - account
      description: change username or password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                username:
                  type: string
                  minLength: 1
                password:
                  type: string
                  format: password
              required:
                - currentPassword
      responses:
        200:
          description: >
            username or password changed successfully
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        409:
          description: username taken
  /account/{userId}:
    get:
      tags:
        - account
      description: >
        get info for the account for user with userId
      security: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: info for the logged in account
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        400:
          $ref: '#/components/responses/400'
        404:
          description: user not found
  /account/profile-picture:
    put:
      tags:
        - account
      description: set profile picture for current user
      requestBody:
        $ref: '#/components/requestBodies/image'
      responses:
        200:
          description: profile picture updated
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
    delete:
      tags:
        - account
      description: remove profile picture for current user
      responses:
        200:
          description: profile picture deleted
        204:
          description: profile picture doesn't exist
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
  /account/profile-picture/{userId}:
    get:
      tags:
        - account
      description: get profile picture for user with userId
      security: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/image'
        400:
          $ref: '#/components/responses/400'
        404:
          description: user not found

  /contacts:
    get:
      tags:
        - contact
      description: get list of contact for the current user
      responses:
        200:
          description: list of contact's userId
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
  /contact/{userId}:
    delete:
      tags:
        - contact
      description: delete contact for the current user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: contact deleted
        204:
          description: contact with userId does not exist
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
  /contact/block:
    post:
      tags:
        - contact
      description: block a user
      requestBody:
        required: true
        description: userId
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: invite sent
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          description: userId does not exist
  /contact/invites/outgoing:
    get:
      tags:
        - contact
      description: >
        get all outgoing invite for the current user
      responses:
        200:
          description: >
            list of userId the current user has invited
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
  /contact/invite/outgoing:
    post:
      tags:
        - contact
      description: invite another user to be contact
      requestBody:
        required: true
        description: userId
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: invite sent
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          description: userId does not exist
  /contact/invites/incoming:
    get:
      tags:
        - contact
      description: >
        get all incoming invite for the current user
      responses:
        200:
          description: >
            list of userId that sent the current user a
            invite
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
  /contact/invite/incoming/{userId}:
    post:
      tags:
        - contact
      description: accept or reject an invite
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              pattern: '^accept|reject$'
      responses:
        200:
          description: invite accepted/rejected
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          description: invite with userId does not exist

  /messages/{userId}:
    get:
      tags:
        - message
      description: >
        get the newest 500 messages older than the oldest
        message client know between current user and user
        with userId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: messageId
          in: query
          description: >
            messageId of the oldest message client know
          required: false
          schema:
            type: string
      responses:
        200:
          description: messageIds
          content:
            application/json:
              schema:
                type: array
                maxItems: 500
                items:
                  type: string
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          description: >
            messageId or contact with userId not found
  /message/{messageId}:
    get:
      tags:
        - message
      description: get the content of the message
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: message content
          content:
            application/json:
              schema:
                type: object
                properties:
                  timeSent:
                    type: string
                    format: date-time
                  timeRecieved:
                    type: string
                    format: date-time
                  timeRead:
                    type: string
                    format: date-time
                  content:
                    type: string

components:
  requestBodies:
    usernamePassword:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                minLength: 1
              password:
                type: string
                format: password
            required:
              - accountname
              - password
    image:
      required: true
      content:
        image/*:
          schema:
            type: string
            format: binary

  responses:
    image:
      description: image
      content:
        image/*:
          schema:
            type: string
            format: binary
    400:
      description: bad request
    401:
      description: unauthorized

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
