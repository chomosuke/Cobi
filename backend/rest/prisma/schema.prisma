generator client {
  provider = "prisma-client-js"
  output   = "./"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                   @id @default(autoincrement())
  username          String                @unique @db.VarChar
  password          String                @db.VarChar
  ProfilePictureUrl String?               @map("profile_picture_url") @db.VarChar
  contacts1         Contact[]             @relation("contact_user_id1Touser")
  contacts2         Contact[]             @relation("contact_user_id2Touser")
  groupChats        GroupChatMembership[] @relation("group_chat_membershipTouser")
  invitesIncoming   Invite[]              @relation("invite_receiver_idTouser")
  invitesOutgoing   Invite[]              @relation("invite_sender_idTouser")
  messagesSent      Message[]
  messagesReceived  MessageReceiver[]

  @@map("user")
}

model Contact {
  userId1 Int  @map("user_id1")
  userId2 Int  @map("user_id2")
  chatId  Int  @unique @map("chat_id")
  chat    Chat @relation(fields: [chatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user1   User @relation("contact_user_id1Touser", fields: [userId1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user2   User @relation("contact_user_id2Touser", fields: [userId2], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([userId1, userId2])
  @@index([chatId], map: "contact_chat_id_fkey_index")
  @@index([userId1], map: "contact_user_id1_fkey_index")
  @@index([userId2], map: "contact_user_id2_fkey_index")
  @@map("contact")
}

model Invite {
  senderId   Int     @map("sender_id")
  receiverId Int     @map("receiver_id")
  rejected   Boolean
  receiver   User    @relation("invite_receiver_idTouser", fields: [receiverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sender     User    @relation("invite_sender_idTouser", fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([senderId, receiverId])
  @@index([receiverId], map: "invite_receiver_id_fkey_index")
  @@index([senderId], map: "invite_sender_id_fkey_index")
  @@map("invite")
}

model Chat {
  id          Int        @id
  groupChatId Int?       @unique @map("group_chat_id")
  groupChat   GroupChat? @relation(fields: [groupChatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contact     Contact?
  messages    Message[]

  @@index([groupChatId], map: "chat_group_chat_id_fkey_index")
  @@map("chat")
}

model GroupChat {
  id          Int                   @id
  name        String                @db.VarChar
  chat        Chat?
  memberships GroupChatMembership[]

  @@map("group_chat")
}

model GroupChatMembership {
  groupChatId Int       @map("group_chat_id")
  userId      Int       @map("user_id")
  groupChat   GroupChat @relation(fields: [groupChatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        User      @relation("group_chat_membershipTouser", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([groupChatId, userId])
  @@index([groupChatId], map: "group_chat_membership_group_chat_id_fkey_index")
  @@index([userId], map: "group_chat_membership_user_id_fkey_index")
  @@map("group_chat_membership")
}

model Message {
  id        Int               @id
  chatId    Int               @map("chat_id")
  timeSent  DateTime          @map("time_sent") @db.Timestamp(6)
  senderId  Int               @map("sender_id")
  type      MessageType
  content   String            @db.VarChar
  chat      Chat              @relation(fields: [chatId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User              @relation(fields: [senderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  receivers MessageReceiver[]

  @@unique([chatId, timeSent])
  @@index([chatId], map: "message_chat_id_fkey_index")
  @@index([senderId], map: "message_sender_id_fkey_index")
  @@map("message")
}

model MessageReceiver {
  messageId    Int      @map("message_id")
  receiverId   Int      @map("receiver_id")
  timeReceived DateTime @map("time_received") @db.Timestamp(6)
  timeRead     DateTime @map("time_read") @db.Timestamp(6)
  message      Message  @relation(fields: [messageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User     @relation(fields: [receiverId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([messageId, receiverId])
  @@index([messageId])
  @@index([receiverId], map: "message_receiver_receiver_id_fkey_index")
  @@map("message_receiver")
}

enum MessageType {
  text
  voice
  image
  video
  file

  @@map("message type")
}
