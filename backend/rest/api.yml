openapi: '3.0.3'
info:
  title: REST API documentation
  description: 'Note: response generated by express-openapi-validator
    are not explicitly stated'
  version: '1.0'
security:
- bearerAuth: []
servers:
- url: '{host}/api'
paths:
  /account/login:
    post:
      tags:
      - account
      security: []
      requestBody:
        $ref: '#/components/requestBodies/usernamePassword'
      responses:
        200:
          description: logged in
          content:
            text/plain:
              schema:
                type: string
                description: bearer token
        401:
          description: unauthorized
  /account/register:
    post:
      tags:
      - account
      security: []
      requestBody:
        $ref: '#/components/requestBodies/usernamePassword'
      responses:
        200:
          description: register success and logged in
          content:
            text/plain:
              schema:
                type: string
                description: bearer token
        409:
          description: username taken
  /account:
    get:
      tags:
      - account
      description: get info for the logged in account
      responses:
        200:
          description: info for the logged in account
          content:
            application/json:
              schema:
                type: object
                required:
                - username
                additionalProperties: false
                properties:
                  username:
                    type: string
        401:
          description: unauthorized
    patch:
      tags:
      - account
      description: change username or password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - currentPassword
              additionalProperties: false
              properties:
                currentPassword:
                  type: string
                  format: password
                username:
                  type: string
                  minLength: 1
                  maxLength: 128
                password:
                  type: string
                  format: password
                  maxLength: 512
      responses:
        200:
          description: >
            username or password changed successfully
        401:
          description: unauthorized
        409:
          description: username taken
  /account/search:
    get:
      tags:
      - account
      description: search for userId with username
      security: []
      parameters:
      - name: username
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: found userIds presumably ranked
          content:
            application/json:
              schema:
                type: array
                items:
                  type:
                    string
  /account/{userId}:
    get:
      tags:
      - account
      description: >
        get info for the account for user with userId
      security: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: info for the logged in account
          content:
            application/json:
              schema:
                type: object
                required:
                - username
                additionalProperties: false
                properties:
                  username:
                    type: string
        404:
          description: user not found
  /account/profile-picture:
    get:
      tags:
      - account
      description: get profile picture for user with userId
      responses:
        200:
          description: imageUrl
          content:
            text/plain:
              schema:
                type: string
        401:
          description: unauthorized
        404:
          description: there is no profile picture for this user
    put:
      tags:
      - account
      description: set profile picture for current user
      requestBody:
        required: true
        description: imageUrl
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: profile picture updated
        201:
          description: profile picture created
        401:
          description: unauthorized
    delete:
      tags:
      - account
      description: remove profile picture for current user
      responses:
        200:
          description: profile picture deleted
        204:
          description: profile picture doesn't exist
        401:
          description: unauthorized
  /account/profile-picture/{userId}:
    get:
      tags:
      - account
      description: get profile picture for user with userId
      security: []
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: imageUrl
          content:
            text/plain:
              schema:
                type: string
        404:
          description: user not found

  /contacts:
    get:
      tags:
      - contact
      description: get list of contact for the current user
      responses:
        200:
          description: list of contact's userId
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          description: unauthorized
  /contact/{userId}:
    get:
      tags:
      - contact
      description: get the information of a contact
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: information of a contact
          content:
            application/json:
              schema:
                type: object
                required:
                - chatId
                additionalProperties: false
                properties:
                  chatId:
                    type: string
        401:
          description: unauthorized
        404:
          description: contact not found
    delete:
      tags:
      - contact
      description: delete contact for the current user
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: contact deleted
        204:
          description: contact with userId does not exist
        401:
          description: unauthorized
  # /contact/block:
  #   post:
  #     tags:
  #     - contact
  #     description: block a user
  #     requestBody:
  #       required: true
  #       description: userId
  #       content:
  #         text/plain:
  #           schema:
  #             type: string
  #     responses:
  #       200:
  #         description: invite sent
  #       401:
  #         description: unauthorized
  #       404:
  #         description: userId does not exist
  /contact/invites/outgoing:
    get:
      tags:
      - contact
      description: >
        get all outgoing invite for the current user
      responses:
        200:
          description: >
            list of userId the current user has invited
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          description: unauthorized
  /contact/invite/outgoing:
    post:
      tags:
      - contact
      description: invite another user to be contact
      requestBody:
        required: true
        description: userId
        content:
          text/plain:
            schema:
              type: string
      responses:
        200:
          description: invite sent
        401:
          description: unauthorized
        404:
          description: userId does not exist
  /contact/invites/incoming:
    get:
      tags:
      - contact
      description: >
        get all incoming invite for the current user
      responses:
        200:
          description: >
            list of userId that sent the current user a
            invite
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        401:
          description: unauthorized
  /contact/invite/incoming/{userId}:
    post:
      tags:
      - contact
      description: accept or reject an invite
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              pattern: '^accept|reject$'
      responses:
        200:
          description: invite accepted/rejected
        401:
          description: unauthorized
        404:
          description: invite with userId does not exist

  /chats:
    get:
      tags:
      - chat
      description: all chats sorted by newest message
      responses:
        200:
          description: all chats sorted in decending order
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: chatId
        401:
          description: unauthorized

  /messages/{chatId}/older-than/{messageId}:
    get:
      tags:
        - message
      description: >
        get the newest 256 messages older than message with messageId
      parameters:
      - name: chatId
        in: path
        required: true
        schema:
          type: string
      - name: messageId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: messageIds
          content:
            application/json:
              schema:
                type: array
                maxItems: 256
                items:
                  type: string
        401:
          description: unauthorized
        404:
          description: messageId or chatId not found
  /messages/{chatId}/newer-than/{messageId}:
    get:
      tags:
      - message
      description: >
        get the oldest 256 messages newer than message with messageId
      parameters:
      - name: chatId
        in: path
        required: true
        schema:
          type: string
      - name: messageId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: messageIds
          content:
            application/json:
              schema:
                type: array
                maxItems: 256
                items:
                  type: string
        401:
          description: unauthorized
        404:
          description: messageId or chatId not found
  /messages/{chatId}/newest:
    get:
      tags:
      - message
      description: >
        get the newest 256 messages for user
      parameters:
      - name: chatId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: messageIds
          content:
            application/json:
              schema:
                type: array
                maxItems: 256
                items:
                  type: string
        401:
          description: unauthorized
        404:
          description: chatId not found
  /message/{chatId}:
    post:
      tags:
        - message
      description: sending a message
      parameters:
      - name: chatId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - type
              - content
              additionalProperties: false
              properties:
                type:
                  type: string
                  enum: [text, image, video, file]
                content:
                  description: for image, video & file it's the url
                  oneOf:
                  - type: string
                    description: for file or text
                  - type: array
                    description: for video & image
                    items:
                      type: string
      responses:
        200:
          description: message sent
          content:
            text/plain:
              schema:
                type: string
                description: messageId
        401:
          description: unauthorized
        404:
          description: chatId not found
  /message/{chatId}/{messageId}:
    get:
      tags:
      - message
      description: get the content of the message
      parameters:
      - name: messageId
        in: path
        required: true
        schema:
          type: string
      - name: chatId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: message content
          content:
            application/json:
              schema:
                type: object
                required:
                - senderId
                - timeSent
                - receivers
                - type
                - content
                additionalProperties: false
                properties:
                  senderId:
                    type: string
                  timeSent:
                    type: string
                    format: date-time
                  receivers:
                    type: array
                    items:
                      type: object
                      required:
                      - userId
                      - timeReceived
                      - timeRead
                      properties:
                        userId:
                          type: string
                        timeReceived:
                          type: string
                          format: date-time
                        timeRead:
                          type: string
                          format: date-time
                  type:
                    type: string
                    enum: [text, voice, image, video, file]
                  content:
                    description: for voice, image, video, file it's the url
                    oneOf:
                    - type: string
                      description: for text, voice, video, file
                    - type: array
                      description: for image
                      maxItems: 30
                      items:
                        type: string
        401:
          description: unauthorized
        404:
          description: messageId or chatId not found

components:
  requestBodies:
    usernamePassword:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
            - username
            - password
            additionalProperties: false
            properties:
              username:
                type: string
                minLength: 1
                maxLength: 128
              password:
                type: string
                format: password
                maxLength: 512

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
